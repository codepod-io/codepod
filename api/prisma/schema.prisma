// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

generator studio-client {
    provider      = "prisma-client-js"
    binaryTargets = ["native"]
}

model Post {
    id        String   @id
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    title     String   @db.VarChar(255)
    content   String?
    published Boolean  @default(false)
    author    User     @relation(fields: [authorId], references: [id])
    authorId  String
}

model Profile {
    id     String  @id
    bio    String?
    user   User    @relation(fields: [userId], references: [id])
    userId String  @unique
}

model User {
    id             String  @id
    email          String  @unique
    // username is an optional value, because it might create barrier when user signup.
    username       String? @unique
    firstname      String
    lastname       String
    // A user might not have a password, if they login via OAuth.
    hashedPassword String?

    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @default(now()) @updatedAt
    posts        Post[]
    profile      Profile?
    Repo         Repo[]         @relation("OWNER")
    sharedRepos  Repo[]         @relation("COLLABORATOR")
    stars        Repo[]         @relation("STAR")
    UserRepoData UserRepoData[]

    codeiumAPIKey String? @default("")
}

model UserRepoData {
    user       User     @relation(fields: [userId], references: [id])
    userId     String
    repo       Repo     @relation(fields: [repoId], references: [id])
    repoId     String
    accessedAt DateTime @default(now()) @updatedAt
    dummyCount Int      @default(0)

    // use computed ID
    @@id([userId, repoId])
}

model Snapshot1 {
    id        String   @id
    createdAt DateTime @default(now())
    yDocBlob  Bytes?
    Repo      Repo     @relation(fields: [repoId], references: [id])
    repoId    String
}

model Blob {
    id        String   @id
    updatedAt DateTime @updatedAt
    yDocBlob  Bytes?
    Repo      Repo[]
}

model Snapshot {
    id        String   @id
    createdAt DateTime @default(now())
    message   String?
    yDocBlob  Bytes?
    Repo      Repo?    @relation(fields: [repoId], references: [id])
    repoId    String?
}

model UnifiedBlob {
    id        String   @id
    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())

    // FIXME history repo should be one repo, not a list.
    yDocBlob Bytes?
    history  Repo[]

    current Repo?   @relation("HISTORY", fields: [repoId], references: [id])
    repoId  String?
}

model Repo {
    id            String         @id
    name          String?
    // fullname String  @unique
    owner         User           @relation("OWNER", fields: [userId], references: [id])
    userId        String
    pods          Pod[]          @relation("BELONG")
    edges         Edge[]
    public        Boolean        @default(false)
    collaborators User[]         @relation("COLLABORATOR")
    createdAt     DateTime       @default(now())
    // Edit pod content likely won't update this updatedAt field.
    updatedAt     DateTime       @default(now()) @updatedAt
    UserRepoData  UserRepoData[]
    stargazers    User[]         @relation("STAR")

    // Option 1:
    yDocBlob1      Bytes?
    yDocSnapshots1 Snapshot1[]

    // Option 2:
    yDocBlob2      Blob?      @relation(fields: [yDocBlob2Id], references: [id])
    yDocBlob2Id    String?
    yDocSnapshots2 Snapshot[]

    // Option 3:
    yDocBlob3      UnifiedBlob?  @relation(fields: [yDocBlob3Id], references: [id])
    yDocBlob3Id    String?
    yDocSnapshots3 UnifiedBlob[] @relation("HISTORY")
}

enum PodType {
    CODE
    SCOPE
    DECK
    WYSIWYG
    MD
    REPL
}

model Edge {
    source   Pod     @relation("SOURCE", fields: [sourceId], references: [id])
    sourceId String
    target   Pod     @relation("TARGET", fields: [targetId], references: [id])
    targetId String
    repo     Repo?   @relation(fields: [repoId], references: [id])
    repoId   String?

    @@id([sourceId, targetId])
}

model Pod {
    id        String  @id
    parent    Pod?    @relation("PARENT", fields: [parentId], references: [id])
    parentId  String?
    x         Float   @default(0)
    y         Float   @default(0)
    width     Float   @default(0)
    height    Float   @default(0)
    index     Int
    // TODO how to specify the order of children
    //
    // Option 1:
    // https://stackoverflow.com/questions/11094338/storing-item-positions-for-ordering-in-a-database-efficiently
    // I can store a (position, timestamp). To udpate, just move the position, and
    // use a new timestamp. The newer timestamp will ensure the correct order.
    //
    // What about
    // - addition: OK
    // - deletion: OK
    // - deletion + insertion: seems OK
    //
    //
    // Option 2:
    // https://softwareengineering.stackexchange.com/questions/304593/how-to-store-ordered-information-in-a-relational-database
    // Another option is to maintain the order of the pod, then, update all other
    // pods after it.
    children  Pod[]   @relation("PARENT")
    content   String?
    // the HEAD version and STAGED version of pod content
    githead   String?
    staged    String?
    column    Int     @default(1)
    fold      Boolean @default(false)
    thundar   Boolean @default(false)
    utility   Boolean @default(false)
    name      String?
    lang      String?
    type      PodType
    result    String?
    stdout    String?
    error     String?
    imports   String?
    exports   String?
    midports  String?
    reexports String?
    // repo        Repo?    @relation("ROOT")
    repo      Repo    @relation("BELONG", fields: [repoId], references: [id])

    repoId String
    // this is just a place holder. Not useful
    source Edge[] @relation("SOURCE")
    target Edge[] @relation("TARGET")
}
