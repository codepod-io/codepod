# Use postgres/example user/password credentials
version: "3.5"

services:
  db:
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db-data:/var/lib/postgresql/data

  # Run: docker compose up setup
  # Then run: docker compose up -d
  setup:
    image: node:18
    working_dir: /codepod
    depends_on:
      - db
    volumes:
      - ../..:/codepod
    # Need to pnpm config set store-dir ~/pnpm
    # Ref: https://github.com/pnpm/pnpm/issues/3952#issuecomment-1262136483
    command: sh -c "corepack enable && pnpm config set store-dir ~/pnpm && pnpm install && cd apps/api && pnpm dlx prisma migrate dev"
    environment:
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?schema=public"

  prisma:
    image: node:18
    restart: always
    command: sh -c "corepack enable && pnpm dlx prisma studio"
    working_dir: /codepod/apps/api
    volumes:
      - ../..:/codepod
    environment:
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?schema=public"

  api:
    image: node:18
    working_dir: /codepod/apps/api
    volumes:
      - ../..:/codepod
      - /var/run/docker.sock:/var/run/docker.sock
    command: sh -c "corepack enable && pnpm dev"
    environment:
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?schema=public"
      JWT_SECRET: ${JWT_SECRET}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      KERNEL_NETWORK: "codepod"
      EXPORT_AWS_S3_REGION: ${EXPORT_AWS_S3_REGION}
      EXPORT_AWS_S3_BUCKET: ${EXPORT_AWS_S3_BUCKET}
      EXPORT_AWS_S3_ACCESS_KEY_ID: ${EXPORT_AWS_S3_ACCESS_KEY_ID}
      EXPORT_AWS_S3_SECRET_ACCESS_KEY: ${EXPORT_AWS_S3_SECRET_ACCESS_KEY}
      PROXY_API_URL: "http://proxy:4011/graphql"
      ZMQ_KERNEL_IMAGE: "lihebi/codepod-kernel-python:0.4.13-alpha.49"
      WS_RUNTIME_IMAGE: "lihebi/codepod-runtime:0.4.13-alpha.49"
      # Set PROJECT_ROOT to the absolute path of your codepod local repo if you
      # want to debug the runtime code.
      #
      # PROJECT_ROOT: "/path/to/codepod"

      # 1000 * 60 * 3: 3 minutes
      # KERNEL_TTL: "180000"
      # 1000 * 60 * 60 * 12: 12 hours
      KERNEL_TTL: "43200000"
      # 1000 * 5: 5 seconds
      # LOOP_INTERVAL: "5000"
      # 1000 * 60 * 1: 1 minute 
      LOOP_INTERVAL: "60000"

  yjs-server:
    image: node:18
    working_dir: /codepod/apps/api
    volumes:
      - ../..:/codepod
      - /var/run/docker.sock:/var/run/docker.sock
    command: sh -c "corepack enable && pnpm dev:yjs"
    environment:
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?schema=public"
      JWT_SECRET: ${JWT_SECRET}
      # TODO move kernel spawner to proxy server
      KERNEL_NETWORK: "codepod"
      PROXY_API_URL: "http://proxy:4011/graphql"
      ZMQ_KERNEL_IMAGE: "lihebi/codepod-kernel-python:0.4.13-alpha.49"
      WS_RUNTIME_IMAGE: "lihebi/codepod-runtime:0.4.13-alpha.49"
      # Set PROJECT_ROOT to the absolute path of your codepod local repo if you
      # want to debug the runtime code.
      #
      # PROJECT_ROOT: "/path/to/codepod"

      # 1000 * 60 * 3: 3 minutes
      # KERNEL_TTL: "180000"
      # 1000 * 60 * 60 * 12: 12 hours
      KERNEL_TTL: "43200000"
      # 1000 * 5: 5 seconds
      # LOOP_INTERVAL: "5000"
      # 1000 * 60 * 1: 1 minute 
      LOOP_INTERVAL: "60000"

  ui:
    image: node:18
    working_dir: /codepod/apps/ui
    environment:
      TEST: "123"
      VITE_APP_GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      VITE_APP_CODEIUM_API_KEY: ${CODEIUM_API_KEY}
    volumes:
      - ../..:/codepod
    command: sh -c "corepack enable && pnpm generate && pnpm dev"

  proxy:
    image: node:18
    working_dir: /codepod/apps/proxy
    volumes:
      - ../..:/codepod
    command: sh -c "corepack enable && pnpm dev"

  nginx:
    image: nginx:alpine
    depends_on:
      - ui
      - api
    ports:
      - 8080:8080
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf

  # This container is only used for installing node_modules into the volume, so
  # that the docker spawner can use the image without waiting for installing.
  example-runtime-dev:
    image: node:18
    working_dir: /codepod/apps/runtime
    volumes:
      - ../..:/codepod
    command: sh -c "corepack enable && pnpm dev"

  example-runtime-prod:
    image: lihebi/codepod-runtime:0.4.13-alpha.49

  # This is only used to download the kernel image, so that the docker spawner
  # can use the image without waiting for downloading.
  example-kernel:
    image: lihebi/codepod-kernel-python:0.4.13-alpha.49

volumes:
  db-data:

networks:
  default:
    name: codepod
    driver: bridge
