# Use postgres/example user/password credentials
version: "3.5"

services:
  db:
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db-data:/var/lib/postgresql/data

  prisma:
    image: node:18
    restart: always
    command: sh -c "yarn && yarn run prisma studio"
    working_dir: /app
    volumes:
      - ../../api:/app
      - prisma-node-modules:/app/node_modules
    environment:
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?schema=public"

  api:
    image: node:18
    working_dir: /app
    volumes:
      - ../../api:/app
      - api-node-modules:/app/node_modules
      - /var/run/docker.sock:/var/run/docker.sock
    command: sh -c "yarn && yarn dev"
    environment:
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?schema=public"
      JWT_SECRET: ${JWT_SECRET}
      KERNEL_NETWORK: "codepod"
      PROXY_API_URL: "http://proxy:4011/graphql"
      ZMQ_KERNEL_IMAGE: "lihebi/codepod-kernel-python:latest"
      WS_RUNTIME_IMAGE: "lihebi/codepod-runtime:latest"

  ui:
    image: node:18
    working_dir: /app
    ports:
      # For react hot-reloading in development.
      - 3000:3000
    volumes:
      - ../../ui:/app
      - ui-node-modules:/app/node_modules
    command: sh -c "yarn && yarn dev"

  proxy:
    image: node:18
    working_dir: /app
    volumes:
      - ../../proxy:/app
      - proxy-node-modules:/app/node_modules
    command: sh -c "yarn && yarn dev"

  nginx:
    image: nginx:alpine
    ports:
      - 80:80
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/nginx.conf

volumes:
  db-data:
  api-node-modules:
  ui-node-modules:
  proxy-node-modules:
  prisma-node-modules:

networks:
  default:
    name: codepod
    driver: bridge
